// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stloumustdo.Data;

#nullable disable

namespace stloumustdo.Migrations
{
    [DbContext(typeof(stloumustdoContext))]
    [Migration("20220205011439_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BucketListCafe", b =>
                {
                    b.Property<int>("BucketListBucketId")
                        .HasColumnType("int");

                    b.Property<int>("CafesId")
                        .HasColumnType("int");

                    b.HasKey("BucketListBucketId", "CafesId");

                    b.HasIndex("CafesId");

                    b.ToTable("BucketListCafe");
                });

            modelBuilder.Entity("BucketListLocalAttraction", b =>
                {
                    b.Property<int>("AttractionsId")
                        .HasColumnType("int");

                    b.Property<int>("BucketListBucketId")
                        .HasColumnType("int");

                    b.HasKey("AttractionsId", "BucketListBucketId");

                    b.HasIndex("BucketListBucketId");

                    b.ToTable("BucketListLocalAttraction");
                });

            modelBuilder.Entity("BucketListRestaurants", b =>
                {
                    b.Property<int>("BucketListBucketId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantsId")
                        .HasColumnType("int");

                    b.HasKey("BucketListBucketId", "RestaurantsId");

                    b.HasIndex("RestaurantsId");

                    b.ToTable("BucketListRestaurants");
                });

            modelBuilder.Entity("BucketListStatewideOutdoors", b =>
                {
                    b.Property<int>("BucketListBucketId")
                        .HasColumnType("int");

                    b.Property<int>("OutdoorsId")
                        .HasColumnType("int");

                    b.HasKey("BucketListBucketId", "OutdoorsId");

                    b.HasIndex("OutdoorsId");

                    b.ToTable("BucketListStatewideOutdoors");
                });

            modelBuilder.Entity("stloumustdo.Models.BucketList", b =>
                {
                    b.Property<int>("BucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BucketId"), 1L, 1);

                    b.HasKey("BucketId");

                    b.ToTable("BucketList");
                });

            modelBuilder.Entity("stloumustdo.Models.Cafe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CafeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cafes");
                });

            modelBuilder.Entity("stloumustdo.Models.LocalAttraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttractionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttractionUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalAttractions");
                });

            modelBuilder.Entity("stloumustdo.Models.Restaurants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResturauntAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("stloumustdo.Models.StatewideOutdoors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistanceFromSTL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutdoorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutdoorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatewideOutdoors");
                });

            modelBuilder.Entity("stloumustdo.Models.UserProfileViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BucketId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BucketId");

                    b.ToTable("UserProfileViewModel");
                });

            modelBuilder.Entity("BucketListCafe", b =>
                {
                    b.HasOne("stloumustdo.Models.BucketList", null)
                        .WithMany()
                        .HasForeignKey("BucketListBucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stloumustdo.Models.Cafe", null)
                        .WithMany()
                        .HasForeignKey("CafesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BucketListLocalAttraction", b =>
                {
                    b.HasOne("stloumustdo.Models.LocalAttraction", null)
                        .WithMany()
                        .HasForeignKey("AttractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stloumustdo.Models.BucketList", null)
                        .WithMany()
                        .HasForeignKey("BucketListBucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BucketListRestaurants", b =>
                {
                    b.HasOne("stloumustdo.Models.BucketList", null)
                        .WithMany()
                        .HasForeignKey("BucketListBucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stloumustdo.Models.Restaurants", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BucketListStatewideOutdoors", b =>
                {
                    b.HasOne("stloumustdo.Models.BucketList", null)
                        .WithMany()
                        .HasForeignKey("BucketListBucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stloumustdo.Models.StatewideOutdoors", null)
                        .WithMany()
                        .HasForeignKey("OutdoorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("stloumustdo.Models.UserProfileViewModel", b =>
                {
                    b.HasOne("stloumustdo.Models.BucketList", "BucketList")
                        .WithMany()
                        .HasForeignKey("BucketId");

                    b.Navigation("BucketList");
                });
#pragma warning restore 612, 618
        }
    }
}
